{"version":3,"sources":["components/Floor_test.jsx","components/Bulb_test.jsx","components/Skybox_test.jsx","state.js","components/ColorPicker_test.jsx","components/Orbit.jsx","components/Model.jsx","components/Dragable_test.jsx","components/BoundingBox.jsx","components/Cars.jsx","components/CameraControls.jsx","components/CameraButtons.jsx","components/Lights.jsx","components/Effects.jsx","App.js","reportWebVitals.js","index.js"],"names":["Floor","props","useBox","args","ref","receiveShadow","transparent","opacity","Bulb_test","useRef","scene","useThree","useEffect","lights","push","castShadow","shadow-mapSize-height","shadow-mapSize-width","shadow-radius","emissive","SkyBox_test","texture","CubeTextureLoader","load","background","state","activeMesh","activeMeshName","cameraPos","THREE","target","shouldUpdate","ColorPicker_test","handleClick","e","material","color","style","position","zIndex","left","right","margin","width","display","top","onClick","height","extend","OrbitControls","Orbit","camera","gl","attach","domElement","Model","mixer","model","useLoader","GLTFLoader","process","path","console","log","animations","length","forEach","clip","clipAction","play","useFrame","delta","update","traverse","child","isMesh","side","object","scale","DragControls","DragableTest","groupRef","controlsRef","useState","children","setChildren","current","addEventListener","orbitControls","enabled","api","mass","set","copy","velocity","transformGroup","BoundingBox","offset","dims","visible","wireframe","Cars","fallback","Array","fill","rotation","Math","PI","CameraControls","name","getObjectByName","lerp","clone","sub","bottom","textAlign","borderRadius","fontSize","fontWeight","border","cursor","CameraButtons","sets","1","2","num","Lights","intensity","Effects","setLights","focusDistance","focalLength","bokehScale","App","shadows","powerPreference","antialias","stencil","depth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAYeA,EAVD,SAAAC,GAAU,IAAD,EACLC,aAAO,+BAAQC,KAAM,CAAC,GAAG,EAAE,KAAQF,MAA1CG,EADY,oBAEnB,OACI,+CAAMA,IAAKA,GAASH,GAApB,IAA2BI,eAAa,EAAxC,UACI,mCAAmBF,KAAM,CAAC,IAAK,EAAG,OAClC,sCAAsBG,aAAW,EAACC,QAAS,UCmBxCC,EAtBG,SAAAP,GAChB,IAAMG,EAAMK,mBACLC,EAASC,cAATD,MAMP,OALAE,qBAAU,WACLF,EAAMG,OAAQH,EAAMG,OAAOC,KAAKV,GAC9BM,EAAMG,OAAS,CAACT,KACpB,IAGD,iDAAUH,GAAV,cACE,4BACEc,YAAU,EACVC,wBAAuB,IACvBC,uBAAsB,IACtBC,gBAAiB,KAEnB,sCAAsBf,KAAM,CAAC,MAC7B,mCAAmBgB,SAAU,eCIpBC,EAlBK,WAAM,IAChBV,EAAUC,cAAVD,MAGFW,GAFS,IAAIC,qBAEIC,KAAK,CAC1B,4BACA,4BACA,4BACA,4BACA,4BACA,8BAKF,OADAb,EAAMc,WAAaH,EACZ,MCTMI,EATD,CACVC,WAAY,GACZC,eAAgB,uBAChBC,UAAW,IAAIC,UAAc,EAAE,EAAE,GACjCC,OAAQ,IAAID,UAAc,EAAE,EAAE,GAC9BE,cAAc,GCwCHC,EA9CU,SAAA/B,GACvB,IAAMgC,EAAc,SAAAC,GACdT,EAAMC,aACVD,EAAMC,WAAWS,SAASC,MAAQ,IAAIP,QAAYK,EAAEJ,OAAOO,MAAMb,cAEnE,OACE,sBACEa,MAAO,CACLC,SAAU,WACVC,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPC,OAAQ,OACRC,MAAO,cACPC,QAAS,OACTC,IAAK,QATT,UAYI,qBACEC,QAAWb,EACXI,MAAS,CACPb,WAAW,OACXuB,OAAO,GACPJ,MAAO,MAGX,qBACEG,QAAWb,EACXI,MAAS,CACPb,WAAW,SACXuB,OAAO,GACPJ,MAAO,MAGX,qBACEG,QAAWb,EACXI,MAAS,CACPb,WAAW,QACXuB,OAAO,GACPJ,MAAO,U,QCxCnBK,YAAO,CAACC,oBAER,IAUeC,EAVD,WAAK,MAEIvC,cAAdwC,EAFU,EAEVA,OAAQC,EAFE,EAEFA,GACf,OACE,+BACAC,OAAO,gBACPlD,KAAM,CAACgD,EAAQC,EAAGE,e,QCkCPC,EAxCD,SAAAtD,GACV,IAKIuD,EALEC,EAAQC,YACVC,IACAC,wBAAyB3D,EAAM4D,MAyBnC,OAvBAC,QAAQC,IAAI9D,EAAM4D,KAAMJ,GAErBA,EAAMO,WAAWC,OAAS,IACzBT,EAAQ,IAAI3B,iBAAqB4B,EAAM/C,OACvC+C,EAAMO,WAAWE,SAAQ,SAAAC,GACNX,EAAMY,WAAWD,GACzBE,WAIfC,aAAS,SAAC5D,EAAO6D,GAAW,IAAD,EAClB,QAAL,EAAAf,SAAA,SAAOgB,OAAOD,MAIlBd,EAAM/C,MAAM+D,UAAS,SAAAC,GACdA,EAAMC,SACLD,EAAM3D,YAAa,EACnB2D,EAAMrE,eAAgB,EACtBqE,EAAMvC,SAASyC,KAAO/C,gBAG9BiC,QAAQC,IAAIN,GAER,uCACIoB,OAAQpB,EAAM/C,MACdoE,MAAS7E,EAAM6E,OAEX7E,K,QChChB+C,YAAO,CAAC+B,mBAER,IAyDeC,EAzDM,SAAA/E,GACjB,IAAMgF,EAAWxE,mBACXyE,EAAczE,mBAFK,EAGO0E,mBAAS,IAHhB,mBAGlBC,EAHkB,KAGRC,EAHQ,OAIG1E,cAArBwC,EAJkB,EAIlBA,OAAQC,EAJU,EAIVA,GAAI1C,EAJM,EAINA,MA2CnB,OAzCAE,qBAAU,WAENyE,EAAYJ,EAASK,QAAQF,YAC9B,IAEHxE,qBAAU,WACNsE,EAAYI,QAAQC,iBAChB,WAEA,SAAArD,GAAC,OAAIxB,EAAM8E,cAAcC,SAAU,KAEvCP,EAAYI,QAAQC,iBAChB,YAEA,SAAArD,GAAC,OAAIxB,EAAM8E,cAAcC,SAAU,KAEvCP,EAAYI,QAAQC,iBAChB,aAEA,SAAArD,GAAM,IAAD,EACD,UAAAA,EAAE2C,OAAOa,WAAT,SAAcC,KAAKC,IAAI,MAI/BV,EAAYI,QAAQC,iBAChB,WAEA,SAAArD,GAAM,IAAD,EAAC,UAAAA,EAAE2C,OAAOa,WAAT,SAAcC,KAAKC,IAAI,MAEjCV,EAAYI,QAAQC,iBAChB,QAGA,SAAArD,GAAM,IAAD,IACD,UAAAA,EAAE2C,OAAOa,WAAT,SAAcpD,SAASuD,KAAK3D,EAAE2C,OAAOvC,UACrC,UAAAJ,EAAE2C,OAAOa,WAAT,SAAcI,SAASF,IAAI,EAAE,EAAE,QAGxC,CAACR,EAAU1E,EAAM8E,gBAIhB,wBAAOpF,IAAK6E,EAAZ,UACI,8BACIc,eAAgB9F,EAAM8F,eACtB3F,IAAO8E,EACP/E,KAAO,CAACiF,EAAUjC,EAAQC,EAAGE,cAChCrD,EAAMmF,aCnCJY,EAvBK,SAAC,GAOd,IAAD,IANF1D,gBAME,MANS,CAAC,EAAE,EAAE,GAMd,MALF2D,cAKE,MALO,CAAC,EAAE,EAAE,GAKZ,MAJFC,YAIE,MAJK,CAAC,EAAE,EAAE,GAIV,MAHFC,eAGE,SAFFf,EAEE,EAFFA,SAEE,EACiBlF,aAAO,iBAAO,CAACyF,KAAK,EAAGxF,KAAM+F,EAAM5D,SAAUA,MAD9D,mBACKlC,EADL,KACUsF,EADV,KAEF,OACI,wBAAOtF,IAAKA,EAAKsF,IAAKA,EAAtB,UACI,uBAAMZ,MAAOoB,EAAMC,QAASA,EAA5B,UACI,gCACA,sCAAsBC,WAAS,OAEnC,uBAAO9D,SAAU2D,EAAjB,SACKb,QC6BFiB,EA1CF,WACT,OACI,eAAC,WAAD,CAAUC,SAAU,KAApB,UACI,cAAC,EAAD,CAAcP,gBAAc,EAA5B,SACE,cAAC,EAAD,CACEI,SAAO,EACP7D,SAAU,CAAC,EAAG,EAAG,GACjB4D,KAAQ,CAAC,EAAE,EAAE,GACbD,OAAS,CAAC,GAAG,GAAI,IAJnB,SAME,cAAC,EAAD,CACEpC,KAAK,4BACLiB,MAAS,IAAIyB,MAAM,GAAGC,KAAK,WAKjC,cAAC,EAAD,UACE,cAAC,EAAD,CACEL,SAAO,EACP7D,SAAU,EAAE,EAAG,EAAG,GAClB4D,KAAQ,CAAC,EAAE,EAAE,GACbD,OAAS,CAAC,GAAG,GAAI,IAJnB,SAME,cAAC,EAAD,CACEpC,KAAK,4BACLiB,MAAS,IAAIyB,MAAM,GAAGC,KAAK,YAKjC,uBAAOC,SAAU,CAAC,EAAEC,KAAKC,GAAG,GAA5B,SACE,cAAC,EAAD,CACE9C,KAAK,yBACLiB,MAAO,IAAIyB,MAAM,GAAGC,KAAK,a,QCN1BI,EA7BQ,SAAC,GAwBpB,OAxB2B,eAE3BtC,aAAS,YACR,IADUnB,EACX,EADWA,OAAQzC,EACnB,EADmBA,OAEZe,EAAMC,WAAWmF,OAASpF,EAAME,iBAC/BF,EAAMC,WAAahB,EAAMoG,gBACrBrF,EAAME,iBACL,IAENF,EAAMM,gBAGLoB,EAAOb,SAASyE,KAAKtF,EAAMG,UAAW,IACtClB,EAAM8E,cAAc1D,OAAOiF,KAAKtF,EAAMK,OAAQ,IAC9CpB,EAAM8E,cAAchB,SAEhBrB,EAAOb,SAAS0E,QACfC,IAAIxF,EAAMG,WAAWqC,SAEhB,KAAKxC,EAAMM,cAAgB,OAMzC,M,QC3BFM,EAAQ,CACVE,OAAQ,EACRD,SAAU,WACV4E,OAAQ,OAERnE,OAAQ,OACRJ,MAAO,OACPnB,WAAY,QACZ2F,UAAW,SACXC,aAAc,OACdC,SAAU,GACVC,WAAY,OACZ/G,QAAS,GACTgH,OAAQ,kBACRC,OAAQ,WAmDGC,EAhDO,SAAC,GAAQ,eAE3B,IAAMC,EAAO,CAETC,EAAG,CACC/F,UAAW,CAAC,EAAE,EAAE,GAChBE,OAAQ,CAAC,EAAE,EAAE,GACb+E,KAAM,wBAGVe,EAAG,CACChG,UAAW,CAAC,EAAE,EAAE,GAChBE,OAAQ,EAAE,EAAE,EAAE,GACd+E,KAAM,oBAIR5E,EAAc,SAAA4F,GAAQ,IAAD,KACvB,EAAApG,EAAMG,WAAUgE,IAAhB,oBAAuB8B,EAAKG,GAAKjG,aACjC,EAAAH,EAAMK,QAAO8D,IAAb,oBAAoB8B,EAAKG,GAAK/F,SAC9BL,EAAME,eAAiB+F,EAAKG,GAAKhB,KACjCpF,EAAMM,cAAe,EACrB+B,QAAQC,IAAI,oBAEhB,OACI,qCACI,wBACIjB,QAAS,SAAAZ,GAAC,OAAID,EAAY,IAC1BI,MAAK,aACDG,KAAM,QACHH,GAJX,SAOK,MAEL,wBACIS,QAAS,SAAAZ,GAAC,OAAID,EAAY,IAC1BI,MAAK,aACDI,MAAO,QACJJ,GAJX,SAOK,UCzCFyF,EAlBA,SAAC,GACZ,OADmB,eAEf,qCACI,8BAAcC,UAAW,KACzB,kCACA/G,wBAAA,SAAuB,EAAG,IAC1BC,uBAAA,SAAsB,EAAG,IACzBC,gBAAe,GACfoB,SAAU,CAAC,EAAE,EAAE,GACfyF,UAAW,EACXhH,YAAU,IAEV,cAAC,EAAD,CAAUuB,SAAU,EAAE,EAAE,EAAE,KAC1B,cAAC,EAAD,CAAUA,SAAU,CAAC,EAAE,EAAE,KACzB,cAAC,EAAD,CAAUA,SAAU,CAAC,EAAE,EAAE,S,QCmBtB0F,EA/BC,WAAO,IAAD,EACU7C,mBAAS,MADnB,mBACXtE,EADW,KACHoH,EADG,KAEVvH,EAAUC,cAAVD,MAKR,OAJAE,qBAAU,WACFF,EAAMG,QAAkC,IAAxBH,EAAMG,OAAOoD,QAC7BgE,EAAUvH,EAAMG,UACrB,CAACH,EAAMG,SAENA,EACA,cAAC,IAAD,UACI,cAAC,IAAD,CACIqH,cAAe,EACfC,YAAa,IACbC,WAAY,EACZrF,OAAQ,QAahB,MC+BOsF,MA5Cf,WAEE,OACE,sBAAKhG,MAAO,CAACU,OAAQ,QAASJ,MAAM,SAApC,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,eAAC,IAAD,CAAQ2F,SAAO,EAEbjG,MAAO,CAACb,WAAY,SACpB2B,OAAQ,CAACb,SAAU,CAAC,EAAE,EAAE,IAExBc,GAAI,CACFmF,gBAAiB,mBACjBC,WAAW,EACXC,SAAS,EACTC,OAAO,GATX,UAcE,cAAC,EAAD,IAEA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,4BAAYvI,KAAM,CAAC,KAEnB,cAAC,WAAD,CAAUmG,SAAU,KAApB,SACE,cAAC,EAAD,MAKF,eAAC,IAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAWhE,SAAU,CAAC,GAAG,GAAI,QAG/B,cAAC,EAAD,WC3COqG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c303887b.chunk.js","sourcesContent":["import {useBox } from '@react-three/cannon';\n\nconst Floor = props => {\n    const [ref] = useBox(() => ({args: [20,1,10], ...props}))\n    return (\n        <mesh ref={ref} {...props} receiveShadow>\n            <boxBufferGeometry args={[200, 1, 200]} />\n            <meshPhysicalMaterial transparent opacity={0.2}/>\n        </mesh>\n    )\n}\n\nexport default Floor;","import {useEffect, useRef} from 'react'\nimport {useThree} from '@react-three/fiber'\n//import { Scene } from 'three'\n\nconst Bulb_test = props =>{\n  const ref = useRef()\n  const {scene} = useThree()\n  useEffect(() =>{\n    if(scene.lights) scene.lights.push(ref)\n    else scene.lights = [ref]\n  }, [])\n\n  return (\n    <mesh {...props} >\n      <pointLight \n        castShadow\n        shadow-mapSize-height={512}\n        shadow-mapSize-width={512}\n        shadow-radius = {10}\n      />\n      <sphereBufferGeometry args={[0.2]}/>\n      <meshPhongMaterial emissive ='white'/>\n    </mesh>\n  )\n}\n\nexport default Bulb_test;","import { useThree } from '@react-three/fiber';\n\nimport {\n  CubeTextureLoader\n} from \"three\";\n\n\nconst SkyBox_test = () =>{\n  const { scene } = useThree();\n  const loader = new CubeTextureLoader();\n  // The CubeTextureLoader load method takes an array of urls representing all 6 sides of the cube.\n  const texture = loader.load([\n    \"textures/cubemap/0/px.png\",\n    \"textures/cubemap/0/nx.png\",\n    \"textures/cubemap/0/py.png\",\n    \"textures/cubemap/0/ny.png\",\n    \"textures/cubemap/0/pz.png\",\n    \"textures/cubemap/0/nz.png\",\n  ]);\n\n  // Set the scene background property to the resulting texture.\n  scene.background = texture;\n  return null;\n}\n\nexport default SkyBox_test;","import * as THREE from 'three'\n//model3 name: \"Capot001_CAR_PAINT_0\"\n//model s name: \"object005_bod_0\"\n\nconst state = {\n    activeMesh: {},\n    activeMeshName: \"Capot001_CAR_PAINT_0\",\n    cameraPos: new THREE.Vector3(9,2,4),\n    target: new THREE.Vector3(4,0,0),\n    shouldUpdate: true\n\n}\n\nexport default state","import * as THREE from 'three';\nimport state from '../state'\n\nconst ColorPicker_test = props =>{\n  const handleClick = e =>{\n    if(!state.activeMesh) return;\n    state.activeMesh.material.color = new THREE.Color(e.target.style.background)\n  }\n  return(\n    <div \n      style={{\n        position: 'absolute', \n        zIndex: 1,\n        left: 0,\n        right: 0,\n        margin: 'auto',\n        width: 'fit-content',\n        display: 'flex',\n        top: '20px'   \n      }}\n    >\n        <div\n          onClick = {handleClick} \n          style = {{\n            background:'blue', \n            height:50, \n            width: 50\n          }}>\n        </div>\n        <div\n          onClick = {handleClick}\n          style = {{\n            background:'yellow', \n            height:50, \n            width: 50\n          }}>\n        </div>\n        <div\n          onClick = {handleClick}\n          style = {{\n            background:'white', \n            height:50, \n            width: 50\n          }}>\n        </div>\n      </div>\n  )\n}\n\nexport default ColorPicker_test;","import {useThree, extend} from '@react-three/fiber';\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls';\nextend({OrbitControls});\n\nconst Orbit = () =>{\n  //const state = useThree();\n  const {camera, gl} = useThree();\n  return (\n    <orbitControls \n    attach='orbitControls'\n    args={[camera, gl.domElement]}/>\n  );\n}\n\nexport default Orbit;","import {useLoader, useFrame} from '@react-three/fiber';\nimport {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader';\nimport * as THREE from 'three'\n\nconst Model = props =>{\n    const model = useLoader(\n        GLTFLoader,\n        process.env.PUBLIC_URL + props.path\n    )\n    console.log(props.path, model);\n    let mixer\n    if(model.animations.length > 0){\n        mixer = new THREE.AnimationMixer(model.scene)\n        model.animations.forEach(clip =>{\n            const action = mixer.clipAction(clip)\n            action.play()\n        })\n    }\n\n    useFrame((scene, delta) => {\n        mixer?.update(delta)\n\n    })\n\n    model.scene.traverse(child =>{\n        if(child.isMesh){\n            child.castShadow = true\n            child.receiveShadow = true\n            child.material.side = THREE.FrontSide\n        }\n    })\n    console.log(model)\n    return (\n        <primitive \n            object={model.scene}\n            scale = {props.scale}\n            //scale = {new Array(3).fill(0.01)}\n            {...props}\n        />\n        \n        //null\n    )\n}\n\nexport default Model;","import { \n    DragControls \n} from 'three/examples/jsm/controls/DragControls';\nimport {useRef, useEffect, useState} from 'react';\nimport {extend, useThree} from '@react-three/fiber';\nextend({DragControls});\n\nconst DragableTest = props =>{\n    const groupRef = useRef();\n    const controlsRef = useRef();\n    const [children, setChildren] = useState([]);\n    const {camera, gl, scene} = useThree();\n    \n    useEffect(() =>{\n        //console.log(groupRef.current)\n        setChildren(groupRef.current.children)\n    }, [])\n\n    useEffect(() =>{\n        controlsRef.current.addEventListener(\n            'hoveron', \n            //e => console.log(scene)\n            e => scene.orbitControls.enabled = false\n        );\n        controlsRef.current.addEventListener(\n            'hoveroff', \n            //e => console.log(scene)\n            e => scene.orbitControls.enabled = true\n        );\n        controlsRef.current.addEventListener(\n            'dragstart', \n            //e => console.log(scene)\n            e => {\n                e.object.api?.mass.set(0)\n                //console.log(e.object)\n            }\n        );\n        controlsRef.current.addEventListener(\n            'dragend', \n            //e => console.log(scene)\n            e => {e.object.api?.mass.set(1)}\n        );\n        controlsRef.current.addEventListener(\n            'drag', \n            //e => console.log(scene)\n            //e => console.log(e.object.position)\n            e => {\n                e.object.api?.position.copy(e.object.position)\n                e.object.api?.velocity.set(0,0,0)\n            }\n        );\n    }, [children, scene.orbitControls])\n    //console.log(props.children)\n\n    return(\n        <group ref={groupRef}>\n            <dragControls \n                transformGroup={props.transformGroup}\n                ref = {controlsRef} \n                args ={[children, camera, gl.domElement]}/>\n            {props.children}\n        </group>\n    )\n}\nexport default DragableTest;","import {useBox} from '@react-three/cannon'\n\nconst BoundingBox = ({\n    position = [0,0,0],\n    offset = [0,0,0],\n    dims = [1,1,1],\n    visible = false,\n    children\n\n}) => {\n    const [ref, api] = useBox(() => ({mass:1, args: dims, position: position}))\n    return (\n        <group ref={ref} api={api}>\n            <mesh scale={dims} visible={visible}>\n                <boxGeometry/>\n                <meshPhysicalMaterial wireframe/>\n            </mesh>\n            <group position={offset}>\n                {children}\n            </group>\n        </group>\n        \n    )\n}\n\nexport default BoundingBox","import {Suspense} from 'react';\nimport Model from './Model';\nimport DragableTest from './Dragable_test';\nimport BoundingBox from './BoundingBox';\n\nconst Cars = () =>{\n    return (\n        <Suspense fallback={null}>\n            <DragableTest transformGroup>\n              <BoundingBox \n                visible \n                position={[4, 4, 0]}\n                dims = {[3,2,6]}\n                offset ={[0,-0.4,0.8]}\n              >\n                <Model \n                  path='/tesla_model_3/scene.gltf'\n                  scale = {new Array(3).fill(0.01)}\n                  //position = {[4,0.6,0]}\n                />\n              </BoundingBox>                         \n            </DragableTest>\n            <DragableTest >\n              <BoundingBox \n                visible \n                position={[-4, 4, 0]}\n                dims = {[3,2,7]}\n                offset ={[0,-0.8,0.2]}\n              >\n                <Model \n                  path='/tesla_model_s/scene.gltf'\n                  scale = {new Array(3).fill(0.013)}\n                  //position = {[0,-0.8,0]}\n                />\n              </BoundingBox>               \n            </DragableTest>\n            <group rotation={[0,Math.PI,0]}>\n              <Model\n                path='/mech_drone/scene.gltf'\n                scale={new Array(3).fill(0.01)}\n              />\n            </group>\n            \n          </Suspense>\n    )\n}\n\nexport default Cars","import { useFrame } from '@react-three/fiber';\nimport state from '../state';\nimport * as THREE from 'three'\n\nconst CameraControls = ({}) =>{\n    //const vec = new THREE.Vector3()\n    useFrame(({camera, scene}) =>\n    {\n        if(state.activeMesh.name !== state.activeMeshName){\n            state.activeMesh = scene.getObjectByName(\n                state.activeMeshName\n            ) || {}\n        }\n        if(state.shouldUpdate)\n        {\n            //camera.position.lerp(vec.set(...state.cameraPos), 0.1)\n            camera.position.lerp(state.cameraPos, 0.1)\n            scene.orbitControls.target.lerp(state.target, 0.1)\n            scene.orbitControls.update()\n            const diff = \n                camera.position.clone()\n                .sub(state.cameraPos).length()\n            //console.log(diff)\n            if(diff < 0.1) state.shouldUpdate  = false\n        }\n        \n\n    })\n    return (\n        null\n    )\n}\n\nexport default CameraControls","import state from '../state'\n\nconst style = {\n    zIndex: 1,\n    position: 'absolute',\n    bottom: '30vh',\n    // left: '40vw',\n    height: '30px',\n    width: '30px',\n    background: 'white',\n    textAlign: 'center',\n    borderRadius: '100%',\n    fontSize: 20,\n    fontWeight: 'bold',\n    opacity: 0.7,\n    border: '1px solid black',\n    cursor: 'pointer'\n}\n\nconst CameraButtons = ({}) => {\n\n    const sets = {\n        // model_3\n        1: {\n            cameraPos: [9,2,4],\n            target: [4,0,0],\n            name: \"Capot001_CAR_PAINT_0\"\n        },\n        // model_s\n        2: {\n            cameraPos: [1,2,5],\n            target: [-4,0,0],\n            name: \"object005_bod_0\"\n        }\n    }\n\n    const handleClick = num => {\n        state.cameraPos.set(...sets[num].cameraPos)\n        state.target.set(...sets[num].target)\n        state.activeMeshName = sets[num].name\n        state.shouldUpdate = true\n        console.log('helo click fire');\n    }\n    return (\n        <> \n            <button\n                onClick={e => handleClick(2)}\n                style={{\n                    left: '40vw',\n                    ...style\n                }}\n            >\n                {'<'}\n            </button>\n            <button\n                onClick={e => handleClick(1)}\n                style={{\n                    right: '40vw',\n                    ...style\n                }}\n            >\n                {'>'}\n            </button>\n        </>\n    )\n}\n\nexport default CameraButtons","import BulbTest from './Bulb_test';\n\nconst Lights = ({}) =>{\n    return (\n        <>\n            <ambientLight intensity={0.2}/>    \n            <directionalLight \n            shadow-mapSize-height={2**10}\n            shadow-mapSize-width={2**10}\n            shadow-radius={10}\n            position={[6,3,0]}\n            intensity={2}\n            castShadow\n            /> \n            <BulbTest position={[-6,3,0]}/>\n            <BulbTest position={[0,3,0]}/>\n            <BulbTest position={[6,3,0]}/>\n        </>\n    )\n}\nexport default Lights","import { EffectComposer, DepthOfField, Bloom, Noise, Vignette, GodRays } from '@react-three/postprocessing'\nimport { useState, useEffect } from 'react'\nimport { useThree} from '@react-three/fiber'\n\nconst Effects = () => {\n    const [lights, setLights] = useState(null)\n    const { scene } = useThree()\n    useEffect(() => {\n        if (scene.lights && scene.lights.length === 3)\n            setLights(scene.lights)\n    }, [scene.lights])\n    return (\n        lights ? \n        <EffectComposer>\n            <DepthOfField\n                focusDistance={0}\n                focalLength={0.02}\n                bokehScale={2}\n                height={480}\n            />\n            {/* {lights.map(light => \n                <GodRays \n                    key={light.current.uuid} \n                    sun={light.current}\n                />\n            )} */}\n            {/* <Bloom luminanceThreshold={0} luminanceSmoothing={0.9} height={300} />\n            <Noise opacity={0.02} />\n            <Vignette eskil={false} offset={0.1} darkness={1.1} /> */}\n        </EffectComposer>\n        :\n        null\n    )\n}\n\nexport default Effects","//import logo from './logo.svg';\nimport './App.css';\nimport BackgroundTest from './components/Background';\nimport FloorTest from './components/Floor_test';\nimport BulbTest from './components/Bulb_test';\nimport SkyboxTest from './components/Skybox_test';\nimport ColorPickerTest from './components/ColorPicker_test';\nimport Orbit from './components/Orbit';\nimport {Suspense} from 'react';\nimport {Canvas} from '@react-three/fiber';\nimport {Physics} from '@react-three/cannon'\nimport Cars from './components/Cars'\nimport CameraControls from './components/CameraControls'\nimport CameraButtons from './components/CameraButtons'\nimport Lights from './components/Lights'\nimport Effects from './components/Effects'\n\n//import Dragable from './components/Dragable_test';\nfunction App() {\n  \n  return (\n    <div style={{height: '100vh', width:'100vw'}}>\n      <ColorPickerTest/>\n      <CameraButtons/>\n      <Canvas shadows\n        //shadowMap\n        style={{background: 'black'}} \n        camera={{position: [7,7,7]}} \n        //gl={{ antialias: true }} pixelRatio={window.devicePixelRatio}\n        gl={{\n          powerPreference: \"high-performance\",\n          antialias: false,\n          stencil: false,\n          depth: false\n        }}\n      >\n        {/* <fog attach = 'fog' args={['white', 1, 10]}/> */}\n                \n        <Lights/>\n        \n        <CameraControls />\n        <Orbit />\n        <axesHelper args={[5]}/>\n        \n        <Suspense fallback={null}>\n          <SkyboxTest/>\n        </Suspense>\n        {/* <Suspense fallback={null}>\n          <BackgroundTest/>\n        </Suspense> */}\n        <Physics>\n          <Cars/>\n          <FloorTest position={[0,-0.5,0]}/>\n                  \n        </Physics>\n        <Effects/>        \n      </Canvas>\n    </div>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}